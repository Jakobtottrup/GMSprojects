<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_grid</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_id = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y += 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y -= 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Rectangle drawing code sample.

// Sets some basic parameters
var x1, y1, x2, y2, outline, color1, color2, color3, color4, up;
x1 = 10;
x2 = 110;
y1 = 10;
y2 = 110;
outline = false;
color1 = c_white;
color2 = c_black;
color3 = c_gray;
color4 = c_ltgray;
up = true;

if (draw_id == 0)
{

// Sets the color of the elements to be drawn.
draw_set_color(c_blue);

// Sets the transparency (0.0 to 1.0) of the elements to be drawn.
draw_set_alpha(1.0);

// Draws a rectangle
// argument0 is the first x position.
// argument1 is the first y position.
// argument2 is the second x position.
// argument3 is the second y position.
// argument4 determines if the drawn rectangles is a one pixel outline (true) or a solid (false).
draw_rectangle(10, 10, 110, 110, true);

// Draws a rectnangle, but with specified colors.
// argument0 is the first x position.
// argument1 is the first y position.
// argument2 is the second x position.
// argument3 is the second y position.
// argument4 determines if the drawn rectangles is a one pixel outline (true) or a solid (false).
draw_rectangle_color(120, 10, 220, 110, c_white, c_black, c_gray, c_ltgray, false);

// Draws a rectangle with rounded edges.  Its parameters are identical to draw_rectangle.
draw_roundrect(10, 120, 110, 220, true);

// Draws a rectangle with rounded edges using specified colors.  
// argument0 to argument3 are identical to draw_rectangle.
// argument4 is the center color
// argument5 is the outer color
// argument6 determines if the drawn rectangles is a one pixel outline (true) or a solid (false).
draw_roundrect_color(120, 120, 220, 220, c_white, c_black, false);

// Draws a simple, rectangular button.
// argument0 to argument3 are the same as draw_rectangle.
// argument4 is a boolean that determines how the button will look.
// If true, the button will look like it is not being pressed; if false, the button will look like it is being pressed down.
draw_button(10, 230, 110, 290, true);
draw_button(120, 230, 220, 290, false);

// Draws a health based on a specified percent.
// argument0 to argument3 are identical to draw_rectangle
// argument4 is the amount the bar if full.  0 is empty, 100 is full.
// argument5 is the back color of the bar.
// argument6 is the color drawn when the health bar is empty.
// argument7 is the color drawn when the health bar is full.
// argument8 is the direction the bar fills.  0 filled left to right, 1 fills right to left, 2 fills top to bottom, 3 filles bottom to top.
// argument9 determines if the back color of the health bar drawn.
// argument10 determines if a 1 pixel black border is drawn.
draw_healthbar(10, 300, 220, 330, 90, c_black, c_red, c_green, 0, true, true);

// Variation at 75% full without background and moving right to left
draw_healthbar(10, 340, 220, 370, 75, c_black, c_red, c_green, 1, false, true);

// Variation at 25% full without border and moving top to bottom
draw_healthbar(10, 380, 220, 410, 25, c_black, c_red, c_green, 2, true, false);

// Varation at 45% full without border or background and moving bottom to top
draw_healthbar(10, 420, 220, 450, 45, c_black, c_red, c_green, 3, false, false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Circle drawing code sample.

if (draw_id == 1)
{
// Draws a circle
// argument0 is the horizontal center of the circle.
// argument1 is the vertical center of the circle.
// argument2 is the circle's radious.
// argument3 determines if the circle will be a one pixel outline (true) or a solid (false).
draw_circle(50, 50, 40, true);

// Draws a circle but with specified colors.
// argument0 to argument2 are the same as draw_circle.
// argument3 is the color at the center of the circle.
// argument4 is the color at the outer edge of the circle.
// argument5 is the same as argument3 in draw_circle.
draw_circle_color(150, 50, 40, c_black, c_white, false);

// Draws an ellipse.
// argument0 is the first x position.
// argument1 is the first y position.
// argument2 is the second x position.
// argument3 is the second y position.
// argument4 determines if the drawn circle will be an outline (true) or solid (false).
draw_ellipse(10, 100, 200, 200, true);

// Draws an ellipse, but with specified colors.
// argument0 - argument3 are identical to draw_ellipse
// argument4 the center color of the ellipse.
// argument5 the outer color of the ellipse.
// argument6 is the same as argument4 in draw_ellipse.
draw_ellipse_color(210, 100, 390, 200, c_white, c_black, false);


// Changes the precision or number of sides circles drawn have.
// argument0, which defaults at 24, should be any number between 4 and 64 that is divisible by 4 for the best results.
// The higher this value, the smoother the drawn ellipse will be.

// Lowest precision, 4.
draw_set_circle_precision(4);
draw_circle(50, 250, 40, false);

// Precision of 16
draw_set_circle_precision(16);
draw_circle(150, 250, 40, false);

// Default precision, 24
draw_set_circle_precision(24);
draw_circle(250, 250, 40, false);

// Highest precision
draw_set_circle_precision(64);
draw_circle(350, 250, 40, false);

}
else if (draw_id == 6)
{
// Draws a red rectangle with a blue ellipse above it.
// Draws a red rectangle.
draw_set_color(c_red);
draw_rectangle(0, 0, 100, 200, false);
draw_set_color(c_blue);
draw_ellipse(50, 0, 150, 200, false)

// Draws a blue ellipse with a red rectangle on top of it.
draw_set_color(c_blue);
draw_ellipse(200, 0, 300, 200, false);
draw_set_color(c_red);
draw_rectangle(250, 0, 350, 200, false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Line and arrow sample code

if (draw_id == 2)
{


// Draws a point on screen.
// argument0 is the x coordinate.
// argument1 is the y coordingate.
draw_point(50, 50);

// Draws a point with a specified color.
// argument0 and argument1 reflect draw_point.
// argument2 is the color the point will be.
draw_point_color(75, 50, c_white);

// Draws a one-pixel wide line
// argument0 is the starting x point of the line.
// argument1 is the starting y point of the line.
// argument2 is the ending x point of the line.
// argument3 is the ending y point of the line.
draw_line(100, 10, 100, 110);

// Draws a line with specified a width
// argument0 to argument3 reflects those in draw_line
// argument4 is the width in pixel of the line.
draw_line_width(125, 10, 125, 110, 10);

// Draws a line with specified colors
// argument0 to argument3 reflects those in draw_line
// argument4 is the color of the line at the start point
// argument5 is the color of the line at the end point.
draw_line_color(150, 10, 150, 110, c_black, c_white);

// Draws a line with specified colors and width.
// argument0 to argument3 reflects those in draw_line
// argument4 is the width in pixel of the line.
// argument6 is the color of the line at the start point
// argument7 is the color of the line at the end point.
draw_line_width_color(175, 10, 180, 110, 10, c_black, c_white);

// Draws a line with an arrowhead at the end.
// argument0 to argument3 are similar to those in draw_line.
// argument4 is the length of the arrowhead.
// The arrowhead will be draw and angled properly at the end point.
// Its length will be determined automatically in proportion to the length.
draw_arrow(200, 110, 200, 10, 10);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drawing sprites

x = 100;
y = 100;

if (draw_id == 3)
{
// Draws the current object at its current location, using its current sprite.
draw_self();

// Draws the specified sprite.
// argument0 is the sprite resource id
// argument1 is the sub-image
// argument2 is the x position.
// argument3 is the y position.
draw_sprite(spr_pieces, 0, 200, 100);

// Draws a portion of a specified sprite as if cropping it.
// argument0 and argument1 are the same as draw_sprite
// argument2 is how many pixels in from the left are cropped.
// argument3 is how many pixels in from the top are cropped.
// argument4 is the width of the drawn portion of the sprite.
// argument5 is the height of the drawn portion of the sprite.
// argument6 is the x position.
// argument7 is the y position.
draw_sprite_part(spr_pieces, 4, 12, 12, 40, 40, 300, 50);

// Draws a sprite, stretched to fit within a specified position and size.
// argument0 and argument1 reflect draw_sprite.
// argument2 is the x position.
// argument3 is the y position.
// argument4 is the width in which the sprite will be stretched to match.
// argument5 is the height in which the sprite will be stretched to match.
draw_sprite_stretched(spr_pieces, 5, 400, 25, 50, 88);

// Draws a sprite with extended parameters.
// argument0 to argument3 are the same as draw_sprite
// argument4 is the x scale.
// argument5 is the y scale.
// argument6 is the angle in degrees.
// argument7 is the blend color.
// argument8 is the alpha
draw_sprite_ext(spr_pieces, 2, 100, 200, 0.5, 1.1, 12.5, c_ltgray, 0.9);

// Renders a sprite using a combination of draw_sprite_part and draw_sprite_ext.
// argument0 to argument7 are identical to draw_sprite_part.
// argument8 is the x scale.
// argument9 is the y scale.
// argument10 is the color.
// argument11 is the alpha.
draw_sprite_part_ext(spr_pieces, 4, 0, 0, 55, 75, 200, 200, 0.9, 1, c_gray, 1.0);
    
// Renders a sprite using a combination of draw_sprite_stretched and draw_sprite_ext.
// argument0 to argument5 are identical to draw_sprite_stretched.
// argument6 is the blend color.
// argument7 is the alpha.
draw_sprite_stretched_ext(spr_pieces, 1, 300, 200, 50, 100, c_gray, 0.9);

// Draws a sprite with the most number of available options.
// argument0 to argument7 reflect those in draw_sprite_part.
// argument8 is the x scale.
// argument9 is the y scale.
// argument10 is the angle in degrees.
// argument11 is the upper left blend color.
// argument12 is the upper right blend color.
// argument13 is the lower right blend color.
// argument14 is the lower left blend color.
// argument15 is the alpha of the drawn sprite.
draw_sprite_general(spr_pieces, 3, 5, 10, 55, 44, 400, 200, 1.0, 1.25, 90, c_black, c_white, c_gray, c_ltgray, 1.0);    

// Draws a sprite with each corner at a specifid coordinate.  Great for skewing a sprite.
// argument0 and argument1 are the same as draw_sprite.
// argument2 is the first x position.
// argument3 is the first y position.
// argument4 is the second x position.
// argument5 is the second y position.
// argument6 is the third x position.
// argument7 is the third y position.
// argument8 is the fourth x position.
// argument9 is the fourth y position.
// argument10 is the alpha transparency.
draw_sprite_pos(spr_pieces, 2, 110, 300, 210, 325, 190, 400, 110, 390, 0.75);
}
else if (draw_id == 5)
{

if (keyboard_check(vk_shift))
{
// Draws sprite tiling across the entire screen.
// argument0 is the sprite index
// argument1 is the sub-image
// argument2 is the x offset
// argument3 is the y offset.
draw_sprite_tiled(spr_pieces, 2, 50, 50);
}
else
{

// Draws a sprite tiling across the entire screen with added parameters.
// argument0 to argument3 are the same as draw_sprite_tiled.
// argument4 is the x scale.
// argument5 is the y scale.
// argument6 is the blend color.
// argument7 is the alpha.
draw_sprite_tiled_ext(spr_pieces, 4, 0, 0, 2, 3, c_gray, 1.0);
}
    

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drawing text

if (draw_id == 4)
{
draw_set_color(c_black);
// Sets the font that will be used when drawing text.
draw_set_font(fnt_main);

// Sets the horizontal alignment of the text to be drawn.
// fa_left is left aligned.
// fa_center is center aligned.
// fa_right is right aligned.
draw_set_halign(fa_left);

// Sets the vertical alignment of the text to be drawn.
// fa_top is top aligned.
// fa_middle is middle aligned.
// fa_bottom is bottom aligned.
draw_set_valign(fa_middle);

// Draws text.
// argument0 is the x coordinate.
// argument1 is the y coordinate.
// argument2 is the text that will be drawn.
draw_text(100, 50, "Text");

// Draws the text with extended parameters.
// argument0 to argument2 are identical to draw_text.
// argument3 is the spacing between lines of text if there are more than one.
// argument4 is a width that, if exceeded by the text, new lines will automatically be created.
draw_text_ext(100, 100, "My Extended Text", 20, 50);

// Draws text while transforming it.
// argument0 to argument2 are identical to draw_text.
// argument3 is the horizontal scale of the text.
// argument4 is the vertical scale of the text.
// argument5 is the angle of the text.
draw_text_transformed(100, 165, "Transformed Text", 1.1, 1.3, 10);

// Draws the text with a specified colors.
// argument0 to argument2 are identical to draw_text.
// argument3 is the upper left color.
// argument4 is the upper right color.
// argument5 is the bottom right color.
// argument6 is the bottom left color.
// argument7 is the transparency (0 to 1) of the text.
draw_text_color(100, 200, "Colored Text", c_black, c_red, c_blue, c_red, 1.0);

// Renders text using a combination of draw_text_ext and draw_text_transformed.
// argument0 to argument4 are the same as draw_text_ext.
// argument5 to argument7 are the same as draw_text_transformed.
draw_text_ext_transformed(300, 50, "Extended, Transformed Text", 15, 100, 1.1, 1.2, -10);

// Draws the text using a combination of draw_text_ext and draw_text_color
// argument0 to argument4 are the same as draw_text_ext.
// argument5 to argument9 are the same as draw_text_color.
draw_text_ext_color(300, 100, "Extended, Color Text", 10, 100, c_black, c_red, c_red, c_black, 1.0);

// Draws text using a combination of draw_text_transformed and draw_text_color
// argument0 to argument5 are the same as draw_text_transformed
// argument6 to argument10 are the same as draw_text_color.
draw_text_transformed_color(300, 160, "Colored, Transformed Text", 0.9, 0.9, 5, c_blue, c_black, c_red, c_black, 1.0);

// Draws text using a combination of all three text functions.
// argument0 to argument7 are the same as draw_text_ext_transformed
// argument8 to argument12 are the same as draw_text_color.
draw_text_ext_transformed_color(300, 225, "Extended, Colored, Transformed Text", 12, 50, 1.0, 0.85, -5, c_black, c_black, c_red, c_red, 0.9);
}
else if (draw_id == 7)
{

draw_set_color(c_black);

draw_set_font(fnt_title);
draw_text(100, 350, "Larger Font B");

draw_set_font(fnt_main);
draw_text(100, 100, "Normal Text A");
draw_text_transformed(100, 150, "Scaled Text A", 3.0, 3.0, 0);

draw_text(100, 300, "Normal Text B");



}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_id++;
if (draw_id &gt; 7)
    draw_id = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y += 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y -= 10;

draw_id--;
if (draw_id &lt; 0) {draw_id = 7; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>36,36</point>
    <point>36,36</point>
  </PhysicsShapePoints>
</object>
