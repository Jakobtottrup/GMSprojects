<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initializes various instanced and global variables for the main menu.

// The number of columns the game will use, ranging from 6 to 20.
global.columns = 10;
column_min = 6;
column_max = 20;

// The number of rows the game will use, ranging from 6 to 10
global.rows = 7;
row_min = 6;
row_max = 12;

// The number of piece types that can be used in the game ranging from 2 to 5.
global.piece_range = 3;
piece_min = 2;
piece_max = 5;

// The amount of time the player has to get the best score possible in minutes.
global.start_time = 3;
start_time_min = 1;
start_time_max = 5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initializes draw event information

// Placement and text for the title.
title_info[0] = room_width * 0.5;
title_info[1] = room_height * 0.1;
title_info[2] = "PUZZLERS!";

// Placement and text for the main heading.
heading_info[0] = title_info[0];
heading_info[1] = room_height * 0.3;
heading_info[2] = "Game Options";

// Placement and text for Column Info
column_info[0] = title_info[0];
column_info[1] = room_height * 0.4;
column_info[2] = "Columns:  " + string(global.columns);

// Placement and text for Row Info
row_info[0] = title_info[0];
row_info[1] = room_height * 0.45;
row_info[2] = "Rows:  " + string(global.rows);

// Placement and text for Start time draw info.
time_info[0] = title_info[0];
time_info[1] = room_height * 0.5;
time_info[2] = "Time:  " + string(global.start_time) + " Minutes";

// Placement and text for the piece info.
piece_info[0] = title_info[0];
piece_info[1] = room_height * 0.55;
piece_info[2] = "Pieces";

// Parameters for displaying the pieces that will be in the level.
piece_width = sprite_get_width(spr_pieces);
piece_width_mid = global.piece_range * piece_width * 0.5;
piece_pos_x_mid = title_info[0] - piece_width_mid;
piece_pos_y = room_height * 0.7;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initializes the draw button info.

// String displayed on GUI buttons to increment a value.
var inc_string = "+";

// String displayed on GUI buttons to decrement a value.
var dec_string = "-";

// Defines the half sizes of the small buttons.
var button_sm_width = 32;
var button_sm_height = 12;

// Defines the half sizes of the large buttons.
var button_lg_width = 128;
var button_lg_height = 32;

// Defines the middle x and y coordinates of the 8 buttons.
var button_pos_mid;
button_pos_mid[0] = room_width * 0.35;
button_pos_mid[1] = room_width * 0.65;

// Uses a for loop to define the button information.
for (var i = 0; i &lt; 8; i++)
{
    // mod is used to determine if the button is on the left (0) or on the right (1).
    var i_mod = i mod 2;
    button_x[i, 0] = button_pos_mid[i_mod];
    
    // The width for the small button are substracted and added from the x coordinate of the center.
    button_x[i, 1] = button_x[i, 0] - button_sm_width;
    button_x[i, 2] = button_x[i, 0] + button_sm_width;
    
    // div is used to move each pair of buttons onto a new row.
    button_y[i, 0] = room_height * (0.4 + 0.05 * (i div 2));
    
    // The height for the small button are substracted and added from the y coordinate of the center
    button_y[i, 1] = button_y[i, 0] - button_sm_height;
    button_y[i, 2] = button_y[i, 0] + button_sm_height;
    
    // A variable used to determine if the button is currently down or not.
    button_down[i] = false;
    
    // If on the left, the text is set to the minus sign, the plus sign is used.
    if (i_mod == 0)
    {
        button_text[i] = dec_string;
    }
    else
    {
        button_text[i] = inc_string;
    }
}

// Defines parameters for the large play button.
button_x[8, 0] = room_width * 0.5;
button_x[8, 1] = button_x[8, 0] - button_lg_width;
button_x[8, 2] = button_x[8, 0] + button_lg_width;

button_y[8, 0] = room_height * 0.85;
button_y[8, 1] = button_y[8, 0] - button_lg_height;
button_y[8, 2] = button_y[8, 0] + button_lg_height;

button_down[8] = false;
button_text[8] = "Start Playing!";

// Used for keyboard input, highlighting which row of buttons is being pressed.
// Set to -1 so no buttons are highlighted.
current_btn_row = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Checks each button.  If the button was down, the menu press script is executed.
for (var i = 0; i &lt; 9; i++)
{
    if (button_down[i] &amp;&amp; ((i div 2) == current_btn_row))
    {
        scr_on_menu_button_pressed(i);
    }
    
    // Sets all buttons to being down to false.
    button_down[i] = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Resets any highlighting performed by the keyboard in case nothing is highlighted.
current_btn_row = -1;

// Test to see which button the mouse is in range of.
for (var i = 0; i &lt; 9; i++)
{
    // Determines if mouse_x and mouse_y are within the x and y coordinates of the button.
    button_down[i] = (mouse_x &gt; button_x[i, 1] &amp;&amp; mouse_x &lt; button_x[i, 2] &amp;&amp;
        mouse_y &gt; button_y[i, 1] &amp;&amp; mouse_y &lt; button_y[i, 2]);

    // If the button is down, that row is set to highlight.    
    if (button_down[i])
    {
        current_btn_row = i div 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draws all of the GUI for the main menu.

// Sets the font and alignment for the title.
draw_set_font(fnt_title);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

// Draws the title.
draw_text(title_info[0], title_info[1], title_info[2]);

// Sets the font for the main text.
draw_set_font(fnt_main);

// Draws the heading and other parameter texts.
draw_text(heading_info[0], heading_info[1], heading_info[2]);
draw_text(column_info[0], column_info[1], column_info[2]);
draw_text(row_info[0], row_info[1], row_info[2]);
draw_text(time_info[0], time_info[1], time_info[2]);
draw_text(piece_info[0], piece_info[1], piece_info[2]);

// Draws the sprites that will show up in the level.
for (var i = 0; i &lt;= global.piece_range; i++)
{
    draw_sprite(spr_pieces, i, piece_pos_x_mid + piece_width * i, piece_pos_y);
}

// Draws the buttons
for (i = 0; i &lt; 9; i++)
{
    // Gets which row the button is in.
    var button_row = i div 2;

    // If the buttons is in the current row, it is colors aqua; otherwise, it is light gray.
    if (current_btn_row == button_row)
    {
        draw_set_color(c_aqua);
    }
    else
    {
        draw_set_color(c_ltgray);
    }    

    // The button is drawn.
    draw_button(button_x[i, 1], button_y[i, 1], button_x[i, 2], button_y[i, 2], !button_down[i]);
    
    // The color is set to black for the text.
    draw_set_color(c_black);
    
    // Draws the centered text at the mid point of the button.
    draw_text(button_x[i, 0], button_y[i, 0], button_text[i]);
}

return 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Changes the state of the drawn buttons with the keyboard.

// Sets the current row to at least 0.
current_btn_row = max(current_btn_row, 0);

// Sets different buttons based on what was pushed.
switch (keyboard_key)
{
    // If up is pushed.
    case vk_up:
        // Moves to the previous button row, and if less than 0 the value loops to its maximum value.
        current_btn_row--;
        if (current_btn_row &lt; 0)
        {
            current_btn_row = 4;
        }
        break;
    case vk_down:
        // Moves to the next row, and if greater than the maximum value, loops around to 0.
        current_btn_row++;
        if (current_btn_row &gt; 4)
        {
            current_btn_row = 0;
        }
        break;
    case vk_left:
        // Sets the button on the left to its down state.
        if (current_btn_row &lt; 4)
        {
            button_down[current_btn_row * 2] = true;   
        }
        break;
    case vk_right:
        // Sets the button on the right to its down state unless the play button is highlight.
        if (current_btn_row &lt; 4)
        {
            button_down[current_btn_row * 2 + 1] = true;
        }
        break;
    case vk_space:
    case vk_enter:
        // Puts the play button in its highlight state.
        if (current_btn_row == 4)
        {
            button_down[current_btn_row * 2] = true;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Since the reaction is identical, the global left release event is triggered.
event_perform(ev_mouse, ev_global_left_release);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
