<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Creates the grid and the pieces on the board, storing them into arrays.

// Randomizes the game so the player doesn't get the same board configuration twice.
randomize();

// Defines the number of columns in the grid.
columns = global.columns;

// Defines the number of rows in the grid.
rows = global.rows;

// The number of pieces that will be present on the board.  Should be greater than 1.
piece_range = global.piece_range;

// Set the horizontal and vertical spacing based on the size of the grid block.
x_spacing = sprite_get_width(spr_grid);
y_spacing = sprite_get_height(spr_grid);

// Uses the original placement to determine the desired distance from all sides.
var x_margin = x;
var y_margin = y;

// Determines the width and height of the board.
var width = x_spacing * columns;
var height = y_spacing * rows;

// Gets the width of the room using the predefined margins.
var room_width_margin = room_width - x_margin * 2;
var room_height_margin = room_height - y_margin * 2;

// If either size exceeds the size of the room, the scale must be adjusted.
if (width &gt; room_width_margin || height &gt; room_height_margin)
{
    image_xscale = room_width_margin / width;
    image_yscale = room_height_margin / height;
    
    // Sets the scale to the smallest value in equal proportions.
    image_xscale = min(image_xscale, image_yscale);
    image_yscale = min(image_xscale, image_yscale);
}

// Multiplies the spacing by the updated scale.
x_spacing *= image_xscale;
y_spacing *= image_yscale;

// The board is moved to fit the new sizing;
width *= image_xscale;
height *= image_yscale;

// The board is moved so pieces are placed at the right starting point.
x = x_margin + (room_width_margin - width + x_spacing) * 0.5;
y = y_margin + (room_height_margin - height + y_spacing) * 0.5;

// Define variables for loops.
var i, j;

// Loop through the columns and rows, creating the grid and puzzle pieces, now using the scale.
for (i = 0; i &lt; columns; i++)
{
    for (j = 0; j &lt; rows; j++)
    {
        array_grid[i, j] = scr_create_in_grid(x, y, x_spacing, y_spacing, 1, obj_grid_block, i, j, image_xscale);
        array_pieces[i, j] = scr_create_in_grid(x, y, x_spacing, y_spacing, 0, obj_puzzle_piece, i, j, image_xscale);
        array_pieces[i, j].image_index =  irandom(piece_range);
    }
}

// Recursively checks the board to prevent matches of three on start.
scr_check_board(false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initializes keyboard and mouse input specific variables.

// A reference to the grid manager.
global.grid_manager = id;

// The current column and row highlighted on the board by mouse.
current_mouse_col = -1;
current_mouse_row = -1;

// The current piece highlighted on the board by keyboard.
current_key_col = -1;
current_key_row = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initializes variables for the state of an alarm-based break.

// Indicates that pieces are being shifted.
shifting_pieces = false;

// Starts playing the music in silence.
//audio_music_gain(0,0);

// Plays the music, starting in silence.
//audio_play_music(bgm_normal, true);

// Fades the music to full volume in 10 seconds.
//audio_music_gain(1, 10000);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initializes variables for scoring, timing, and GUI.

// Resets the current score to 0.
score = 0;

// Combo counter used to exponential increase score for consecutive matches.
combo_count = 0;

// Defines information for the score.
score_info[0] = room_width * 0.03;
score_info[1] = room_height * 0.3;
score_info[2] = "Score:#0000000000";

// The total time in the level.
alarm[1] = global.start_time * room_speed * 60;

// Information for the timer, which will be displayed as a rectangle that transition through three colors.
timer_info[0] = room_width * 0.1;
timer_info[1] = room_height * 0.92;
timer_info[2] = room_width * 0.9;
timer_info[3] = room_height * 0.96;

timer_percentage = 100.0 / alarm[1];

timer_width = timer_info[2];
timer_color_min = c_red;
timer_color_max = c_green;

// Game over variables
game_over_info[0] = room_width * 0.5;
game_over_info[1] = room_height * 0.5;
game_over_info[2] = "TIME OVER!##FINAL SCORE#0";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Removes reference to the destroyed object.
global.grid_manager = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Goes to the main menu room.

// Makes sure to stop the music.
//audio_stop_music();

// Goes to the main menu.
room_goto(rm_main_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ends the game.

// Sets this value to true so pieces cannot be shifted.
shifting_pieces = true;

// Iterates through each piece.
for (var i = 0; i &lt; columns; i++)
{
    for (var j = 0; j &lt; rows; j++)
    {
        // Hides the grid
        array_grid[i, j].visible = false;
        
        // Sets a random speed and gravity to give the illusion of popping off the board.
        with (array_pieces[i, j])
        {
            hspeed = random_range(-10, 10);
            vspeed = random_range(-5, -25);
            gravity = 1;
         
            // Both alarms are set to 0 to prevent any movement that might have been occuring when this alarm was triggered.   
            alarm[0] = 0;
            alarm[1] = 0;
        }
    }
}

// Sets the string for the game over value.
game_over_info[2] = "TIME OVER!##FINAL SCORE#" + string(score);

// fades out the music.
//audio_music_gain(0, 2.5 * 1000);

// Sets the alarm to five second.
alarm[2] = room_speed * 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reorganizes the board and triggers explosions.

scr_reorganize_board();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw's the board's UI.

/// Sets the font and alignment
draw_set_font(fnt_main);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_color(c_black);

// Draws the score on the left of the screen.
draw_text(score_info[0], score_info[1], score_info[2]);

// Determines the percentage of the timer, making sure it doesn't fall below 0.
var percent = max(0, alarm[1] * timer_percentage);

// Draws the custom timer and set the color.
draw_healthbar(timer_info[0], timer_info[1], timer_info[2], timer_info[3], percent, c_black, timer_color_min, timer_color_max, 0, true, true);

// If the percent is less than or equal to 0, meaning the round is over, game over text is written.
if (percent &lt;= 0)
{
    draw_set_font(fnt_title);
    draw_set_halign(fa_center);
    draw_text(game_over_info[0], game_over_info[1], game_over_info[2]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If the mouse is highlighting a piece, this highlight is carried over to the keyboard.
if (current_mouse_col &gt;= 0 &amp;&amp; current_mouse_row &gt;= 0)
{
    current_key_col = current_mouse_col;
    current_key_row = current_mouse_row;

    current_mouse_col = -1;
    current_mouse_row = -1;
}

// If a piece if currently highlighted by the keyboard, this piece goes back to its initial frame.
if (current_key_col &gt;= 0 &amp;&amp; current_key_row &gt;= 0)
{
    array_grid[current_key_col, current_key_row].image_index = 0;
}
else 
{
    // The currently highlighted piece is out of range, the top left is assigned.
    current_key_col = 0;
    current_key_row = 0;
}

// Variable assigned if either shift key or the spacebar is down.
var shift_down;
shift_down = !shifting_pieces &amp;&amp; (keyboard_check(vk_shift) || keyboard_check(vk_space));

// Switch statement used for the four main keyboard directions.
switch(keyboard_key)
{
    case vk_left:
        if (shift_down)
        {
            scr_swap_pieces(current_key_col, current_key_row, -1, 0, false, 0);
        }
        current_key_col--;
        
        break;
    case vk_right:
        if (shift_down)
        {
            scr_swap_pieces(current_key_col, current_key_row, 1, 0, false, 0);
        }
        current_key_col++;
        break;
    case vk_up:
        if (shift_down)
        {
            scr_swap_pieces(current_key_col, current_key_row, 0, -1, false, 0);
        }
        current_key_row--;
        break;
    case vk_down:
        if (shift_down)
        {
            scr_swap_pieces(current_key_col, current_key_row, 0, 1, false, 0);
        }
        current_key_row++;
        break;
}

// The current key clamped to make sure an out of range grid block is not highlighted.
current_key_col = clamp(current_key_col, 0, columns - 1);
current_key_row = clamp(current_key_row, 0, rows - 1);

// If shift or space are down, the current grid block goes to the down frame; otherwise, just the highlight frame.
if (shift_down)
{
    array_grid[current_key_col, current_key_row].image_index = 2;
}
else
{
    array_grid[current_key_col, current_key_row].image_index = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ESAMOKE GAEPAD
/*var i;
for (i = 0; i &lt; gamepad_count; i++)
{
    if (!gamepad_is_connected(i))
        continue;
        
    if (gamepad_button_check_pressed(i, gp_face1))
    {
        keyboard_key_press(vk_space);
    }
    
    if (gamepad_button_check_released(i, gp_face1))
    {
        keyboard_key_release(vk_space);
    }
        
    if (gamepad_button_check_pressed(i, gp_padl))
    {
        keyboard_key_press(vk_left);
    }
    
    if (gamepad_button_check_pressed(i, gp_padr))
    {
        keyboard_key_press(vk_right);
    }
    
    if (gamepad_button_check_pressed(i, gp_padd))
    {
        keyboard_key_press(vk_down);
    }
    
    if (gamepad_button_check_pressed(i, gp_padu))
    {
        keyboard_key_press(vk_up);
    }
    
    if (gamepad_button_check_released(i, gp_padl))
    {
        keyboard_key_release(vk_left);
    }
    
    if (gamepad_button_check_released(i, gp_padr))
    {
        keyboard_key_release(vk_right);
    }
    
    if (gamepad_button_check_released(i, gp_padd))
    {
        keyboard_key_release(vk_down);
    }
    
    if (gamepad_button_check_released(i, gp_padu))
    {
        keyboard_key_release(vk_up);
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If the current key column and row are in range...
if (current_key_col &gt;= 0 &amp;&amp; current_key_row &gt;= 0)
{
    // If spacebar and the shift key are not down, the current grid block is reverted back to the highlight frame.
    if (!keyboard_check(vk_space) &amp;&amp; !keyboard_check(vk_shift))
    {
        array_grid[current_key_col, current_key_row].image_index = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
